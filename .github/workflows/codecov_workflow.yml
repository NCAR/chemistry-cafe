name: Codecov Coverage

on:
  push:
    branches:
      - main
      - codecov_correction
  pull_request:
    branches:
      - main

jobs:
  Codecov-Publishing:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup Node environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Restore frontend dependencies
      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      # Build the project
      - name: Build
        run: npm run build
        working-directory: ./frontend

      # Step 5: Run tests and collect code coverage
      - name: Test and calculate coverage
        run: npm run test:coverage
        working-directory: ./frontend

      # Step 6: Upload the code coverage report to Codecov
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4.2.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: frontend
          fail_ci_if_error: true

      # Step 7: Restore backend dependencies
      - name: Install backend dependencies
        run: dotnet restore
        working-directory: ./backend

      # Step 8: Start up docker
      - name: Start docker
        run: docker compose up mysql -d

      # Step 8: Run backend tests and collect code coverage
      - name: Test and collect backend coverage
        run: dotnet test backend --collect:"Code Coverage;Format=cobertura" --settings backend/.runsettings; docker compose down

      # Step 9: Generate backend test report
      - name: Generate backend test report
        run: reportgenerator -reports:"backend\TestResults\**\**.cobertura.xml" -targetdir:coveragereport -reporttypes:Html,lcov -classfilters:-MySqlConnector.* -filefilters:-/_/src/MySqlConnector/*,-backend\TestResults\**\coverage.cobertura.xml

        # Step 10: Upload the code coverage report to Codecov
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4.2.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend
          fail_ci_if_error: true
